pipelines:
  - name: cicd_go_backend
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: go
            versions:
              - "1.12.14" # 1.13 requires https authentication
    steps:
      # Build the Go sample app from the GitRepo
      - name: cicd_go_build
        type: GoBuild
        configuration:
          affinityGroup: goGroup
          sourceLocation: .
          repository: cicd-go
          outputLocation: /tmp/dist
          outputFile: go_backend
          inputResources:
            - name: cicd_go_backend_gitrepo
          integrations:
            - name: myArtifactory
          environmentVariables:
            CGO_ENABLED: 0 # this is for GO cross compile
             
      # Publish the Go sample app binary to Artifactory
      - name: cicd_go_publish_binary
        type: GoPublishBinary
        configuration:
          affinityGroup: goGroup
          # forceXrayScan: true
          # failOnScan: false
          autoPublishBuildInfo: true
          inputSteps:
            - name: cicd_go_build
          targetRepository: cicd-generic
          integrations:
            - name: myArtifactory
          outputResources:
            - name: cicd_go_backend_buildinfo

      # Xray Scan
      - name: cicd_xray_scan
        type: XrayScan
        configuration:
          affinityGroup: goGroup
          # failOnScan: false
          inputResources:
            - name: cicd_go_backend_buildinfo
              # trigger: true
          outputResources:
            - name: cicd_go_backend_buildinfo_scanned

      # # Promote Go BuildInfo
      # - name: cicd_promote_build
      #   type: PromoteBuild
      #   configuration:
      #     targetRepository: cicd-generic-scanned
      #     includeDependencies: false
      #     status: "Xray Scanned OK"
      #     comment: "Unit testing and Xray scan passed succesfully"
      #     copy: false
      #     inputResources:
      #       - name: cicd_go_backend_buildinfo_scanned
      #         trigger: true
      #     outputResources:
      #       - name: cicd_go_backend_buildinfo_promoted
      #   execution:  
      #     onStart:
      #       - echo ${res_cicd_go_backend_buildinfo_scanned_buildName} 
      #       - echo ${res_cicd_go_backend_buildinfo_scanned_buildNumber} 
      #     # onSuccess:
      #     #   - jfrog rt sp --build=${res_build_info_backapp_scanned_buildName}/${res_build_info_backapp_scanned_buildNumber} app-generic-rc-local/ "app.version=${appVersion}            
             
      # # Publish the Go sample app build info
      # - name: cicd_publish_build_info
      #   type: PublishBuildInfo
      #   configuration:
      #     affinityGroup: goGroup
      #     inputSteps:
      #       - name: cicd_go_publish_binary
      #     outputResources:
      #       - name: cicd_go_backend_buildinfo
             
      # # Publish the Go module from the GitRepo
      # - name: cicd_go_publish_module
      #   type: GoPublishModule
      #   configuration:
      #     sourceLocation: .
      #     version: v0.0.0
      #     targetRepository: cicd-go-local
      #     autoPublishBuildInfo: true
      #     integrations:
      #       - name: myArtifactory
      #     inputSteps:
      #       - name: cicd_go_build
      #     inputResources:
      #       - name: cicd_go_backend_gitrepo
      #     outputResources:
      #       - name: cicd_go_backend_buildinfo_module

      # Merge from docker-build
      - name: cicd_docker_build_go_backend
        type: DockerBuild
        configuration:
          affinityGroup: cicd_go_backend_group
          dockerFileLocation: .
          dockerFileName: go-backend.Dockerfile
          dockerImageName: 'artifactory1.tsuyo.org:8082/cicd-docker/cicd-go-backend'
          dockerImageTag: ${run_number}
          dockerOptions: --no-cache
          inputSteps:
            - name: cicd_xray_scan
          inputResources:
            - name: cicd_docker_build_gitrepo
            - name: cicd_docker_build_filespec_go_backend # this is required to get an env variable like ${res_cicd_docker_build_filespec_go_backend_resourcePath}
          integrations:
            - name: myArtifactory
        execution:
          onStart:
            - pwd && ls -l
            - echo "Source Location => ${res_cicd_docker_build_gitrepo_resourcePath}"
            - ls -l ${res_cicd_docker_build_gitrepo_resourcePath}
            - echo "FileSpec Location => ${res_cicd_docker_build_filespec_go_backend_resourcePath}"
            - ls -l ${res_cicd_docker_build_filespec_go_backend_resourcePath}
            - cp ${res_cicd_docker_build_filespec_go_backend_resourcePath}/* ${res_cicd_docker_build_gitrepo_resourcePath}/

      - name: cicd_docker_push_go_backend
        type: DockerPush
        configuration:
          affinityGroup: cicd_go_backend_group
          targetRepository: cicd-docker
          autoPublishBuildInfo: true
          # forceXrayScan: true
          # failOnScan: false
          integrations:
            - name: myArtifactory
          inputSteps:
            - name: cicd_docker_build_go_backend
          outputResources:
            - name: cicd_docker_build_buildinfo_go_backend      
